def len( lst : [Str] ) -> Str {
  def len( lst : [Str] ) -> <l : Str>
  in Python *{
    l = len( lst )
  }*
  ( len( lst = lst )|l )
}

def pick( lst : [Str] ) -> Str {
  def pick( lst : [Str] ) -> <element : Str>
  in Python *{
    import random
    element = random.choice( lst )
  }*
  ( pick( lst = lst )|element )
}

def le( a : Str, b : Str ) -> Bool {
  def le( a : Str, b : Str ) -> <isless : Bool>
  in Python *{
      isless = a < b
    }*
  ( le( a = a, b = b )|isless )
}

def partition( lst : [Str], pivot : Str ) ->
  <lo-lst : [Str],
   eq-lst : [Str],
   hi-lst : [Str]> {

  fold acc : <lo-lst : [Str],
              eq-lst : [Str],
              hi-lst : [Str]>
           = <lo-lst = [: Str],
              eq-lst = [: Str],
              hi-lst = [: Str]>,
       s : Str <- lst
  do
    let <lo-lst = lo-lst : [Str],
         eq-lst = eq-lst : [Str],
         hi-lst = hi-lst : [Str]> = acc;

    if( s == pivot )
    then
      <lo-lst = lo-lst,
       eq-lst = ( s >> eq-lst ),
       hi-lst = hi-lst>
    else
      if le( a = s, b = pivot )
      then
        <lo-lst = ( s >> lo-lst ),
         eq-lst = eq-lst,
         hi-lst = hi-lst>
      else
        <lo-lst = lo-lst,
         eq-lst = eq-lst,
         hi-lst = ( s >> hi-lst )>
      end
    end
  end
}

def sort( lst : [Str] ) -> [Str] {

  let l : Str = len( lst = lst );

  if( ( l == 0 ) or ( l == 1 ) )
  then
    lst
  else

    let pivot : Str =
      pick( lst = lst );

    let <lo-lst = lo-lst : [Str],
         eq-lst = eq-lst : [Str],
         hi-lst = hi-lst : [Str]> =
      partition( lst   = lst,
                 pivot = pivot );

    ( ( sort( lst = lo-lst )+eq-lst )+sort( lst = hi-lst ) )
  end
}

let lst : [Str] =
  [9, 3, 8, 0, 8 : Str];

sort( lst = lst );